name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        # Use standard postgres image - we'll handle pg_cron in tests
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[testing,db]"

    - name: Set up test environment
      env:
        PG_HOST: localhost
        PG_PORT: 5432
        PG_USER: test_user
        PG_PASSWORD: test_password
        PG_DBNAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        CACHE_BACKEND: postgresql_array
        QUERY_QUEUE_PROVIDER: postgresql
      run: |
        # Wait for PostgreSQL to be ready
        for i in {1..30}; do
          if python -c "import psycopg; psycopg.connect('postgresql://test_user:test_password@localhost:5432/test_db')" 2>/dev/null; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done
        
        # Create test tables (pg_cron tests will be skipped if extension unavailable)
        python -c "import psycopg; conn = psycopg.connect('postgresql://test_user:test_password@localhost:5432/test_db'); conn.autocommit = True; cur = conn.cursor(); cur.execute('CREATE TABLE IF NOT EXISTS test_cron_results (id SERIAL PRIMARY KEY, message TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);'); print('Test tables created'); conn.close()"
        
        # Setup PartitionCache tables
        python -m partitioncache.cli.manage_cache setup all

    - name: Run unit tests
      env:
        PG_HOST: localhost
        PG_PORT: 5432
        PG_USER: test_user
        PG_PASSWORD: test_password
        PG_DBNAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        CACHE_BACKEND: postgresql_array
        QUERY_QUEUE_PROVIDER: postgresql
        CI: true
      run: |
        python -m pytest tests/pytest/ -v --tb=short --timeout=60
        
    - name: Run integration tests (core)
      env:
        PG_HOST: localhost
        PG_PORT: 5432
        PG_USER: test_user
        PG_PASSWORD: test_password
        PG_DBNAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        CACHE_BACKEND: postgresql_array
        QUERY_QUEUE_PROVIDER: postgresql
        PYTEST_TIMEOUT: 300
        CI: true
      run: |
        python -m pytest tests/integration/test_cache_backends.py tests/integration/test_cli.py -v --tb=short --timeout=300
        
    - name: Run integration tests (queue & workflows)
      env:
        PG_HOST: localhost
        PG_PORT: 5432
        PG_USER: test_user
        PG_PASSWORD: test_password
        PG_DBNAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        CACHE_BACKEND: postgresql_array
        QUERY_QUEUE_PROVIDER: postgresql
        PYTEST_TIMEOUT: 600
        CI: true
      run: |
        python -m pytest tests/integration/test_queue_processor.py tests/integration/test_end_to_end_workflows.py -v --tb=short --timeout=600
        
    - name: Run performance & stress tests
      if: github.event_name == 'push'  # Only on push, not PR
      env:
        PG_HOST: localhost
        PG_PORT: 5432
        PG_USER: test_user
        PG_PASSWORD: test_password
        PG_DBNAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        CACHE_BACKEND: postgresql_array
        QUERY_QUEUE_PROVIDER: postgresql
        PYTEST_TIMEOUT: 900
        CI: true
      run: |
        python -m pytest tests/integration/test_cache_performance.py tests/integration/test_error_recovery.py -v --tb=short --timeout=900 -m "not slow"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          pytest-results.xml
          coverage.xml
        retention-days: 30