# PartitionCache Environment Configuration Example
# Copy this to .env and customize for your setup

# ==============================================================================
# CORE CONFIGURATION
# ==============================================================================

# Cache backend selection (choose one)
CACHE_BACKEND=postgresql_array
# Options: postgresql_array, postgresql_bit, postgresql_roaringbit, 
#          redis, redis_bit, rocksdb, rocksdb_bit, rocksdict

# Queue provider selection
QUERY_QUEUE_PROVIDER=postgresql
# Options: postgresql, redis

# ==============================================================================
# DATABASE CONFIGURATION (Required for all PostgreSQL backends)
# ==============================================================================

# Primary database connection (used by cache)
DB_HOST=localhost
DB_PORT=5432
DB_USER=your_username
DB_PASSWORD=your_password
DB_NAME=your_database

# ==============================================================================
# QUEUE CONFIGURATION
# ==============================================================================

# PostgreSQL Queue (when QUERY_QUEUE_PROVIDER=postgresql)
PG_QUEUE_HOST=localhost
PG_QUEUE_PORT=5432
PG_QUEUE_USER=your_username
PG_QUEUE_PASSWORD=your_password
PG_QUEUE_DB=your_database

# Redis Queue (when QUERY_QUEUE_PROVIDER=redis)
# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_PASSWORD=                     # Optional
# QUERY_QUEUE_REDIS_DB=2
# QUERY_QUEUE_REDIS_QUEUE_KEY=query_queue

# ==============================================================================
# CACHE BACKEND SPECIFIC CONFIGURATION
# ==============================================================================

# -----------------------------------------------------------------------------
# PostgreSQL Array Cache (CACHE_BACKEND=postgresql_array)
# -----------------------------------------------------------------------------
PG_ARRAY_CACHE_TABLE_PREFIX=partitioncache_array

# -----------------------------------------------------------------------------
# PostgreSQL Bit Cache (CACHE_BACKEND=postgresql_bit)
# -----------------------------------------------------------------------------
PG_BIT_CACHE_TABLE_PREFIX=partitioncache_bit
PG_BIT_CACHE_BITSIZE=10000

# -----------------------------------------------------------------------------
# PostgreSQL Roaring Bitmap Cache (CACHE_BACKEND=postgresql_roaringbit)
# -----------------------------------------------------------------------------
PG_ROARINGBIT_CACHE_TABLE_PREFIX=partitioncache_roaring

# -----------------------------------------------------------------------------
# Redis Set Cache (CACHE_BACKEND=redis)
# -----------------------------------------------------------------------------
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=                      # Optional
REDIS_CACHE_DB=0

# -----------------------------------------------------------------------------
# Redis Bit Cache (CACHE_BACKEND=redis_bit)
# -----------------------------------------------------------------------------
# REDIS_HOST=localhost               # Same as above
# REDIS_PORT=6379                    # Same as above
# REDIS_PASSWORD=                    # Same as above
REDIS_BIT_DB=1
REDIS_BIT_BITSIZE=10000

# -----------------------------------------------------------------------------
# RocksDB Set Cache (CACHE_BACKEND=rocksdb)
# Note: Requires conda installation: conda install -c conda-forge rocksdb
# -----------------------------------------------------------------------------
ROCKSDB_PATH=/tmp/rocksdb

# -----------------------------------------------------------------------------
# RocksDB Bit Cache (CACHE_BACKEND=rocksdb_bit)
# Note: Requires conda installation: conda install -c conda-forge rocksdb
# -----------------------------------------------------------------------------
ROCKSDB_BIT_PATH=/tmp/rocksdb_bit
ROCKSDB_BIT_BITSIZE=10000

# -----------------------------------------------------------------------------
# RocksDict Cache (CACHE_BACKEND=rocksdict)
# Note: Uses rocksdict package (pip installable)
# -----------------------------------------------------------------------------
ROCKSDB_DICT_PATH=/tmp/rocksdict

# ==============================================================================
# DEVELOPMENT AND TESTING
# ==============================================================================

# Testing configuration
CI=false
PYTEST_TIMEOUT=300

# Legacy variables (some tests may still use these)
PG_HOST=localhost
PG_PORT=5432
PG_USER=your_username
PG_PASSWORD=your_password
PG_DBNAME=your_database

# ==============================================================================
# USAGE INSTRUCTIONS
# ==============================================================================

# 1. Copy this file to .env:
#    cp .env.example .env

# 2. Edit .env with your actual values

# 3. Choose your cache backend by setting CACHE_BACKEND

# 4. Set the corresponding backend-specific variables

# 5. Validate your configuration:
#    python test_env_vars.py

# 6. Setup PartitionCache:
#    python -m partitioncache.cli.manage_cache setup all

# ==============================================================================
# PRODUCTION RECOMMENDATIONS
# ==============================================================================

# For production environments:
# - postgresql_array: Best overall performance and features
# - postgresql_bit: Memory-efficient for integer partitions
# - postgresql_roaringbit: Compressed bitmaps for large datasets
# - redis: High-throughput distributed caching
# - rocksdict: Local development without external dependencies

# Security considerations:
# - Use strong passwords
# - Consider connection encryption (SSL/TLS)
# - Limit database user permissions
# - Use environment-specific configuration files